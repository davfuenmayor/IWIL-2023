theory BCIgen imports Main
begin

section \<open>A toy background theory\<close> (*skip on first read*)

(*Sets are encoded as characteristic functions/predicates (i.e. functions with a 'bool' codomain)*)
type_synonym 'a \<sigma> = \<open>'a \<Rightarrow> bool\<close>
(*Set-valued functions act as relations (bi-sorted by default).*)
type_synonym ('a,'b)\<rho> = \<open>'a \<Rightarrow>'b \<sigma>\<close>

abbreviation (input) transpose::"('a \<Rightarrow> 'b \<Rightarrow> 'c) \<Rightarrow> ('b \<Rightarrow> 'a \<Rightarrow> 'c)" ("(_)\<Zcat>" [90])
  where \<open>f\<Zcat> \<equiv> \<lambda>a b. f b a\<close>

(*The algebra of sets is ordered by the standard subset relation, as defined below.*)
definition subset::"('a \<sigma>,'a \<sigma>)\<rho>" (infixr "\<^bold>\<subseteq>" 51) 
  where "A \<^bold>\<subseteq> B \<equiv> \<forall>x. A x \<longrightarrow> B x"
abbreviation (input) supset::"('a \<sigma>,'a \<sigma>)\<rho>" (infixr "\<^bold>\<supseteq>" 51) 
  where "A \<^bold>\<supseteq> B \<equiv> B \<^bold>\<subseteq> A"

(*The infimum (i.e. big-intersection) of a set of sets*)
definition Infimum:: "('a \<sigma>)\<sigma> \<Rightarrow> 'a \<sigma>" ("\<^bold>\<And>")
  where "\<^bold>\<And>S \<equiv> \<lambda>z. (\<forall>X. S X \<longrightarrow> X z)"

(*A set S is closed under a 0/1/2-ary operation (resp. \<chi>/0, \<phi>/1, \<xi>/2)*)
abbreviation (input) op0_closed::"('a, 'a \<sigma>)\<rho>" ("_-closed\<^sub>0") 
  where "\<chi>-closed\<^sub>0 \<equiv> \<lambda>S. S \<chi>" (*just for illustration, not quite useful as a definition *)
definition op1_closed::"('a\<Rightarrow>'a, 'a \<sigma>)\<rho>" ("_-closed\<^sub>1")
  where "\<phi>-closed\<^sub>1 \<equiv> \<lambda>S. \<forall>x. S x \<longrightarrow> S(\<phi> x)"
definition op2_closed::"('a\<Rightarrow>'a\<Rightarrow>'a, 'a \<sigma>)\<rho>" ("_-closed\<^sub>2")
  where "\<xi>-closed\<^sub>2 \<equiv> \<lambda>S. \<forall>x y. S x \<and> S y \<longrightarrow> S(\<xi> x y)"

(*closure under a 2-ary operation can be reduced to closure under a 1-ary operation via partial application*)
lemma op2_closed_def2: "\<xi>-closed\<^sub>2 = (\<lambda>S. (\<forall>x. S x \<longrightarrow> (\<xi> x)-closed\<^sub>1 S))"
  unfolding op1_closed_def op2_closed_def by blast
lemma op2_closed_def3: "\<xi>-closed\<^sub>2 = (\<lambda>S. (\<forall>x. S x \<longrightarrow> (\<xi>\<Zcat> x)-closed\<^sub>1 S))"
   unfolding op1_closed_def op2_closed_def by blast

(*Convenient abbreviation to say that the set S is a subalgebra wrt. to the operations \<chi>/0, \<phi>/1 (extend on demand)*)
definition "subAlg \<chi> \<phi> \<equiv> \<lambda>S. S \<chi> \<and> (\<phi>-closed\<^sub>1 S)" (*i.e. (\<chi>-closed\<^sub>0 S) \<and> (\<phi>-closed\<^sub>1 S)*)
(*The set of elements denoted by terms of the form \<phi>\<^sup>n\<chi>. Let's call them 'inductive(ly generated) sets'*)
definition "indAlg \<chi> \<phi> \<equiv> \<^bold>\<And>(subAlg \<chi> \<phi>)"

(*Convenient notation for composing unary with binary functions*)
abbreviation (input) fcomp12::"('b \<Rightarrow> 'c) \<Rightarrow> ('a \<Rightarrow> 'a \<Rightarrow> 'b) \<Rightarrow> ('a \<Rightarrow> 'a \<Rightarrow> 'c)" (infixr "\<circ>\<^sub>1\<^sub>2" 75) 
  where "\<phi> \<circ>\<^sub>1\<^sub>2 \<xi> \<equiv> \<lambda>x y. \<phi>(\<xi> x y)"


section \<open>Encoding BCI problem\<close>

(*For each model, the semantic domain \<D>\<^sup>i can be seen as the carrier of an algebra \<A> = <\<D>\<^sup>i,e/0,s/1>*)
typedecl i 
consts e :: "i"  (*zero-ary operation*)
       s :: "i\<Rightarrow>i"  (*unary operation*)

(*The first three axioms axiomatize (via equations!) a binary operation 'f' in terms of 'e' and 's'*)
abbreviation (input) "A1 f \<equiv> \<forall>x. f x e = s e"
abbreviation (input) "A2 f \<equiv> \<forall>y. f e (s y) = s (s (f e y))"
abbreviation (input) "A3 f \<equiv> \<forall>x y. f (s x) (s y) = f x (f (s x) y)"

(*The final two axioms constrain a given set 'd' as a subuniverse (subalgebra) of \<A> (= <\<D>\<^sup>i,e/0,s/1>)*)
abbreviation (input) "A4 d \<equiv> d e"
abbreviation (input) "A5 d \<equiv> \<forall>x. d x \<longrightarrow> d (s x)"

(*Recall that the last two axioms correspond to the definition of a <e,s>-subalgebra*)
lemma "(A4 d \<and> A5 d) = (subAlg e s) d"  unfolding  op1_closed_def subAlg_def ..

(*Define the (inductively generated) set N of all elements denoted by terms of the form s\<^sup>ne for some arbitrary n*)
abbreviation "N \<equiv> indAlg e s"

(*We basically want to find out whether axioms A1-3 constrain F in such a way that N is closed under F*)
lemma BCIgen: "A1 F \<and> A2 F \<and> A3 F \<longrightarrow> F-closed\<^sub>2 N" unfolding op2_closed_def2 oops (*no automatic proof...yet*)

(*First of all, note that the axioms A1-3 don't guarantee that N is closed under the unary
  operation (F x) for any arbitrary x in the domain*)
lemma "A1 F \<and> A2 F \<and> A3 F \<longrightarrow> (\<forall>x. (F x)-closed\<^sub>1 N)" nitpick oops (*countermodel found*)
(*but only for those x that belong in fact to the (inductive) set N*)
lemma "A1 F \<and> A2 F \<and> A3 F \<longrightarrow> (\<forall>x. N x \<longrightarrow> (F x)-closed\<^sub>1 N)" oops
(*or, equivalently *)
lemma "A1 F \<and> A2 F \<and> A3 F \<longrightarrow> N  \<^bold>\<subseteq> (\<lambda>x. (F x)-closed\<^sub>1 N)" oops (*but this is difficult to prove automatically*)

(*Recall that when we want to show that a set contains an inductively generated set it suffices to show
  that it is a (sub)algebra wrt. the corresponding signature (the other direction does not hold though!)*)
lemma "(subAlg \<chi> \<phi>) S \<longrightarrow> (indAlg \<chi> \<phi>) \<^bold>\<subseteq> S" by (metis (full_types) Infimum_def indAlg_def subset_def)
lemma "(indAlg \<chi> \<phi>) \<^bold>\<subseteq> S \<longrightarrow> (subAlg \<chi> \<phi>) S" nitpick oops (*countermodel*)

(*Thus we see that our result holds if we manage to prove the following (slightly more general) statement:*)
lemma "A1 F \<and> A2 F \<and> A3 F \<longrightarrow> (subAlg e s) (\<lambda>x. (F x)-closed\<^sub>1 N)"
  unfolding subAlg_def apply auto oops (*unfolds definition of subalgebra and obtains subgoals*)

(*which, recalling the definition of a subalgebra, divides into two subgoals (using minimal sets of assumptions)*)
lemma base: "A1 F \<and> A2 F \<longrightarrow> (F e)-closed\<^sub>1 N" oops (*still not proven automatically*)
lemma induct: "A1 F \<and> A3 F \<longrightarrow> s-closed\<^sub>1 (\<lambda>x. (F x)-closed\<^sub>1 N)" oops (*still not proven automatically*)

(*As it happens, proving those two lemmata requires the following (monomorphic!) definition:*)
definition p:: "(i \<Rightarrow> i \<Rightarrow> i) \<Rightarrow> i \<Rightarrow> i \<Rightarrow> bool" (*we need to enforce the type for the definition to be useful*)
  where "p F \<equiv> N \<circ>\<^sub>1\<^sub>2 F" (*\<lambda>x y. N (F x y)*)

(*We can now prove the 'base' case:*)
lemma base: "A1 F \<and> A2 F \<longrightarrow> (F e)-closed\<^sub>1 N"
  by (smt (verit) Infimum_def indAlg_def op1_closed_def p_def subAlg_def)
(*as well as the 'inductive' case:*)
lemma induct: "A1 F \<and> A3 F \<longrightarrow> s-closed\<^sub>1 (\<lambda>x. (F x)-closed\<^sub>1 N)"
  by (smt (verit, best) Infimum_def indAlg_def op1_closed_def p_def subAlg_def)

(*So we can now finally prove what we set out to:*)
lemma BCIgen: "A1 F \<and> A2 F \<and> A3 F \<longrightarrow> F-closed\<^sub>2 N" 
  by (metis (mono_tags, lifting) Infimum_def base indAlg_def induct op2_closed_def2 subAlg_def)

(*Interestingly, ATPs can automatically detect that BCI follows from the (cut) lemma above!*)
theorem BCI: "A1 f \<and> A2 f \<and> A3 f \<Longrightarrow> \<forall>d. (A4 d \<and> A5 d) \<longrightarrow> d (f (s(s(s(s e)))) (s(s(s(s e)))))"
  by (smt (z3) BCIgen Infimum_def indAlg_def op1_closed_def op2_closed_def2 subAlg_def)


(*Further work: repeat the previous experiment using other axiom sets (e.g. axiomatizing other 
  Ackermann-style functions or hyper-operators). *)

end